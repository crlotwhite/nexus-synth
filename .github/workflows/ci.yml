name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  # Build configuration
  BUILD_TYPE: Release
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  # =============================================================================
  # Multi-Platform Build Matrix
  # =============================================================================
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows x64 (MSVC 2022)",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              generator: "Visual Studio 17 2022",
              arch: "x64",
              vcvars_arch: "x64"
            }
          - {
              name: "Ubuntu 22.04 (GCC 11)",
              os: ubuntu-22.04,
              cc: "gcc-11",
              cxx: "g++-11",
              generator: "Unix Makefiles",
              packages: "gcc-11 g++-11"
            }
          - {
              name: "Ubuntu 22.04 (Clang 14)",
              os: ubuntu-22.04,
              cc: "clang-14",
              cxx: "clang++-14", 
              generator: "Unix Makefiles",
              packages: "clang-14 libc++-14-dev libc++abi-14-dev"
            }
          - {
              name: "macOS 13 (AppleClang)",
              os: macos-13,
              cc: "clang",
              cxx: "clang++",
              generator: "Unix Makefiles"
            }
          - {
              name: "macOS 14 (AppleClang ARM64)",
              os: macos-14,
              cc: "clang",
              cxx: "clang++",
              generator: "Unix Makefiles"
            }

    steps:
    # =============================================================================
    # Environment Setup
    # =============================================================================
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version tagging
    
    - name: Setup System Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libomp-dev \
          ${{ matrix.config.packages }}
          
    - name: Setup System Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja libomp
        
    - name: Setup MSVC Environment (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.config.vcvars_arch }}

    # =============================================================================
    # Build Configuration
    # =============================================================================
    - name: Configure CMake
      run: |
        cmake -B build \
          -G "${{ matrix.config.generator }}" \
          ${{ runner.os == 'Windows' && '-A x64' || '' }} \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DNEXUSSYNTH_BUILD_TESTS=ON \
          -DNEXUSSYNTH_BUILD_EXAMPLES=OFF \
          -DNEXUSSYNTH_USE_SYSTEM_DEPS=OFF

    - name: Build Project
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}

    # =============================================================================
    # Testing Phase
    # =============================================================================
    - name: Run Unit Tests
      working-directory: build
      run: |
        ctest --build-config ${{ env.BUILD_TYPE }} \
              --output-on-failure \
              --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }} \
              --label-regex "unit"

    - name: Run Integration Tests
      working-directory: build
      run: |
        ctest --build-config ${{ env.BUILD_TYPE }} \
              --output-on-failure \
              --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }} \
              --label-regex "integration"

    # =============================================================================
    # Performance Benchmarking
    # =============================================================================
    - name: Run Performance Benchmarks
      working-directory: build
      run: |
        # Create benchmark results directory
        mkdir -p benchmark_results
        
        # Run basic performance benchmark suite
        ${{ runner.os == 'Windows' && './bin/Release/performance_benchmark_tool' || './performance_benchmark_tool' }} \
          suite basic \
          --output ./benchmark_results \
          --json --csv \
          --iterations 25 \
          --warmup 3 \
          --verbose

    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results-${{ matrix.config.name }}
        path: build/benchmark_results/
        retention-days: 30

    # =============================================================================
    # Test Results and Coverage
    # =============================================================================
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.config.name }}
        path: |
          build/Testing/
          build/test_*.xml
        retention-days: 7

    # =============================================================================
    # Build Artifacts
    # =============================================================================
    - name: Package Build Artifacts
      if: success()
      run: |
        # Create distribution package
        cmake --build build --config ${{ env.BUILD_TYPE }} --target package

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: nexussynth-${{ matrix.config.name }}
        path: |
          build/bin/
          build/lib/
          build/*.zip
          build/*.tar.gz
          build/*.deb
          build/*.rpm
        retention-days: 30

  # =============================================================================
  # Performance Analysis Job
  # =============================================================================
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Benchmark Results
      uses: actions/download-artifact@v4
      with:
        pattern: benchmark-results-*
        path: ./all_benchmarks/

    - name: Setup Python for Analysis
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Analysis Dependencies  
      run: |
        pip install pandas matplotlib seaborn numpy scipy

    - name: Run Performance Analysis
      run: |
        python .github/scripts/analyze_performance.py \
          --input ./all_benchmarks/ \
          --output ./performance_report/ \
          --baseline-branch main

    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-analysis-report
        path: ./performance_report/
        retention-days: 90

    - name: Comment Performance Summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('./performance_report/summary.md')) {
            const summary = fs.readFileSync('./performance_report/summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš€ Performance Analysis\n\n${summary}`
            });
          }

  # =============================================================================  
  # Security Analysis Job
  # =============================================================================
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    if: github.event_name == 'push'

    steps:
    - name: Checkout Repository  
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        queries: security-and-quality

    - name: Build for CodeQL
      run: |
        cmake -B build -DNEXUSSYNTH_BUILD_TESTS=OFF
        cmake --build build --config Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # =============================================================================
  # Release Job (Tags only)
  # =============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, performance-analysis]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release_artifacts/

    - name: Create Release Package
      run: |
        mkdir -p release_package
        
        # Copy build artifacts from all platforms
        for dir in ./release_artifacts/nexussynth-*/; do
          if [ -d "$dir" ]; then
            cp -r "$dir"* ./release_package/
          fi
        done
        
        # Create comprehensive release archive
        tar -czf nexussynth-${GITHUB_REF_NAME}-multi-platform.tar.gz -C release_package .

    - name: Generate Release Notes
      run: |
        echo "# NexusSynth ${GITHUB_REF_NAME}" > release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸŽ¯ Performance Highlights" >> release_notes.md
        
        # Extract performance metrics from benchmark results
        if [ -f "./release_artifacts/performance-analysis-report/summary.md" ]; then
          cat "./release_artifacts/performance-analysis-report/summary.md" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## ðŸ“¦ Build Artifacts" >> release_notes.md
        echo "- Windows x64 (MSVC 2022)" >> release_notes.md  
        echo "- Ubuntu 22.04 (GCC 11 & Clang 14)" >> release_notes.md
        echo "- macOS 13/14 (Intel & Apple Silicon)" >> release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸ§ª Test Coverage" >> release_notes.md
        echo "All unit and integration tests passing across platforms." >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          nexussynth-*.tar.gz
          ./release_artifacts/nexussynth-*/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true

  # =============================================================================
  # Cleanup Job
  # =============================================================================
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [build-and-test, performance-analysis, security-analysis]

    steps:
    - name: Delete Old Build Artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoff = new Date();
          cutoff.setDate(cutoff.getDate() - 30); // Keep 30 days
          
          for (const artifact of artifacts.artifacts) {
            if (new Date(artifact.created_at) < cutoff && artifact.name.startsWith('nexussynth-')) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
          }