{
	"meta": {
		"generatedAt": "2025-08-16T15:57:45.695Z",
		"tasksAnalyzed": 10,
		"totalTasks": 10,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 1,
			"taskTitle": "프로젝트 기반 설정 및 빌드 시스템 구축",
			"complexityScore": 4,
			"recommendedSubtasks": 5,
			"expansionPrompt": "CMakeLists.txt 작성, 디렉토리 구조 생성, 각 의존성 라이브러리 통합, Windows x64 빌드 설정, pkg-config 및 CI 설정",
			"reasoning": "표준 CMake 설정이지만 여러 외부 라이브러리 통합과 크로스 플랫폼 지원이 필요. 복잡도는 중간 정도이나 초기 설정의 중요성으로 세분화 필요"
		},
		{
			"taskId": 2,
			"taskTitle": "WORLD 보코더 통합 및 기본 파라미터 추출 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 6,
			"expansionPrompt": "WORLD 래퍼 클래스 설계, WAV 파일 로더 구현, F0 추출 모듈, SP/AP 추출 모듈, 멀티 샘플레이트 지원, JSON 직렬화",
			"reasoning": "오디오 처리 알고리즘 통합이며 메모리 관리와 다양한 샘플레이트 지원이 복잡. 각 파라미터 추출 단계를 독립적으로 구현해야 안정성 확보 가능"
		},
		{
			"taskId": 3,
			"taskTitle": "HMM 모델 구조 및 데이터 표현 설계",
			"complexityScore": 7,
			"recommendedSubtasks": 7,
			"expansionPrompt": "HMM 상태 구조체 정의, 가우시안 혼합 모델 구현, 문맥 특징 스키마 설계, .nvm 포맷 명세, 압축/체크섬 구현, 메타데이터 구조, 버전 관리",
			"reasoning": "바이너리 포맷 설계와 복잡한 통계 모델 구조 정의가 필요. 확장성과 호환성을 고려한 설계가 중요하여 세부 설계 단계가 필요"
		},
		{
			"taskId": 4,
			"taskTitle": "UTAU oto.ini 파싱 및 문맥 특징 생성",
			"complexityScore": 5,
			"recommendedSubtasks": 5,
			"expansionPrompt": "oto.ini 파서 구현, 인코딩 처리, 음소 경계 추출, VCV 패턴 인식, 문맥 특징 벡터 생성",
			"reasoning": "파일 파싱과 규칙 기반 패턴 인식이 주요 작업. 다양한 UTAU 보이스뱅크 호환성 확보를 위해 세분화된 구현 필요"
		},
		{
			"taskId": 5,
			"taskTitle": "기본 HMM 모델 훈련 시스템 구현",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "EM 알고리즘 구현, 가우시안 혼합 모델 학습, Viterbi 정렬, 데이터 증강, 수렴 감지, GV 통계 계산, 멀티스레딩, 모델 검증",
			"reasoning": "통계적 머신러닝 알고리즘 구현으로 높은 수학적 복잡도. 수렴 보장과 성능 최적화가 어려워 세부 구현 단계가 필수"
		},
		{
			"taskId": 6,
			"taskTitle": "MLPG 파라미터 궤적 생성 엔진 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "MLPG 알고리즘 구현, Eigen 통합, Delta 제약 적용, GV 제약 구현, 상태 시퀀스 결정, GPU 가속 검토",
			"reasoning": "선형대수 연산이 많고 실시간 성능 요구가 있음. 수치 안정성과 최적화가 중요하여 각 구성 요소를 독립적으로 구현"
		},
		{
			"taskId": 7,
			"taskTitle": "Pulse-by-Pulse 합성 엔진 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "PbP 합성 코어, FFT 구현, 오버랩-가산 처리, 윈도우 최적화, 실시간 스트리밍, 아티팩트 제거",
			"reasoning": "실시간 오디오 처리로 높은 성능 요구. FFT 최적화와 버퍼 관리가 복잡하여 세부 구현 단계 필요"
		},
		{
			"taskId": 8,
			"taskTitle": "UTAU 리샘플러 인터페이스 구현",
			"complexityScore": 4,
			"recommendedSubtasks": 4,
			"expansionPrompt": "명령행 인자 파싱, 플래그 처리, 에러 핸들링, 로깅 시스템",
			"reasoning": "인터페이스 계층으로 비교적 단순하지만 100% 호환성 보장이 중요. 각 기능을 독립적으로 테스트 가능"
		},
		{
			"taskId": 9,
			"taskTitle": "보이스뱅크 컨디셔닝 도구 구현",
			"complexityScore": 5,
			"recommendedSubtasks": 5,
			"expansionPrompt": "디렉토리 스캐너, 일괄 처리, 진행률 표시, 오류 리포트, 설정 파일 처리",
			"reasoning": "도구성 소프트웨어로 사용자 경험이 중요. 각 처리 단계를 모듈화하여 안정성과 확장성 확보"
		},
		{
			"taskId": 10,
			"taskTitle": "통합 테스트 및 성능 벤치마크 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 6,
			"expansionPrompt": "테스트 스위트 구성, A/B 품질 비교, 벤치마크 도구, CI/CD 파이프라인, 성능 회귀 감지, 문서화",
			"reasoning": "전체 시스템 검증으로 다양한 테스트 시나리오 필요. 자동화와 지속적 통합을 위한 세부 구현 단계 필수"
		}
	]
}