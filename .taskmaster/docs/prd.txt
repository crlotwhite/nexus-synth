<context>
# Overview
NexusSynth는 UTAU 커뮤니티를 위한 차세대 보컬 합성 리샘플러 엔진입니다. 기존 접합 합성(concatenative synthesis) 방식의 한계를 극복하고, 현대적인 파라메트릭 합성과 통계적 모델링을 결합하여 자연스럽고 표현력 있는 보컬 합성을 제공합니다.

현재 UTAU 리샘플러들이 가진 주요 문제점:
- 큰 폭의 피치 변환 시 부자연스러운 "chipmunk effect" 발생
- 음소 경계에서의 불연속적인 연결음
- 제한적인 표현력과 기계적인 음질

NexusSynth는 WORLD 보코더의 고충실도 신호 표현과 HTS의 문맥 인식 기반 생성 능력을 융합하여 이러한 문제들을 해결합니다.

# Core Features
## 하이브리드 파라메트릭/통계적 합성 엔진
- WORLD 보코더 기반의 소스-필터 모델 (F0, 스펙트럼 포락선, 비주기성 분리)
- HTS 기반 통계적 파라미터 생성으로 자연스러운 궤적 생성
- libllsm2 영감의 Pulse-by-Pulse (PbP) 합성 방식

## 이중 단계 처리 아키텍처
- 오프라인 보이스뱅크 컨디셔닝: 원본 WAV 파일을 최적화된 .nvm 모델로 변환
- 실시간 합성: 사전 처리된 모델을 사용하여 빠른 리샘플링 수행

## 고급 표현 제어
- 표준 UTAU 플래그 지원 (g, bre, bri, t 등)
- 포르만트 시프트, 숨소리 제어, 밝기 조절
- 스펙트럼 워핑을 통한 정교한 음색 제어

## 고성능 최적화
- JIT 컴파일을 통한 런타임 최적화
- SIMD 명령어 활용으로 DSP 연산 가속화
- CPU 아키텍처별 동적 코드 생성

# User Experience
## 타겟 사용자
- 기존 UTAU 사용자 (작곡가, 보컬로이드 프로듀서)
- OpenUTAU 사용자
- 보이스뱅크 제작자
- 보컬 합성 품질을 중시하는 고급 사용자

## 핵심 사용자 여정
1. **보이스뱅크 변환**: 기존 UTAU 보이스뱅크를 NexusSynth용 .nvm 파일로 변환
2. **UTAU 통합**: 기존 UTAU/OpenUTAU 환경에서 드롭인 리샘플러로 사용
3. **향상된 품질**: 동일한 작업 흐름으로 현저히 개선된 음질 경험
4. **표현 제어**: 기존 플래그 시스템으로 더 정교한 표현력 조절

## UX 설계 원칙
- **무마찰 전환**: 기존 UTAU 워크플로우와 100% 호환
- **점진적 향상**: 기본 사용은 즉시, 고급 기능은 선택적
- **투명한 처리**: 변환 과정과 성능 정보 제공
</context>

<PRD>
# Technical Architecture
## 시스템 컴포넌트
### 1. 보이스뱅크 컨디셔닝 도구 (오프라인)
- **입력**: 표준 UTAU 보이스뱅크 (WAV + oto.ini)
- **처리**:
  - WORLD 보코더를 통한 F0/SP/AP 파라미터 추출
  - 문맥 특징 라벨 생성 (음소, 음표, 가사 정보)
  - HMM 모델 훈련 (가우시안 혼합 모델)
  - 전역 분산(GV) 통계 계산
- **출력**: 최적화된 .nvm 모델 파일

### 2. 실시간 리샘플러 엔진
- **HTS 통계적 생성 코어**:
  - 문맥 벡터 → 파라미터 궤적 생성
  - MLPG 알고리즘으로 부드러운 궤적 보장
  - GV 제약으로 자연스러운 다이나믹 레인지 유지
- **표현 제어 모듈**:
  - UTAU 플래그 해석 및 파라미터 변환
  - 스펙트럼 워핑, 비주기성 조절
- **PbP 합성 엔진**:
  - 주파수 영역 고조파 생성
  - 스펙트럼 필터링 및 IFFT
  - 중첩-가산으로 연속 파형 생성

### 3. JIT 최적화 시스템
- **Asmjit 기반 동적 코드 생성**
- **CPU 기능 감지** (SSE, AVX, AVX-512)
- **DSP 커널 특화 최적화**

## 데이터 모델
### .nvm 파일 구조
```
- 메타데이터 (보이스뱅크 정보, 샘플레이트 등)
- HMM 모델 (상태, 전이 확률, 출력 분포)
- 결정 트리 (문맥 분류)
- 전역 분산 통계
- 인덱싱 테이블
```

### 문맥 특징 벡터
- 음소적 문맥: 이전/현재/다음 음소
- 음표 단위: MIDI 피치, 길이, 마디 내 위치
- 가사 문맥: 모음/자음, 음절 위치
- 운율 정보: 슬러, 악센트

## API와 통합
### UTAU 리샘플러 인터페이스
- 표준 명령행 인터페이스 준수
- 입력: WAV 파일 경로, 음표 정보, 플래그
- 출력: 렌더링된 WAV 파일

### 라이브러리 의존성
- **WORLD**: F0/SP/AP 분석/합성
- **Eigen**: 행렬 연산, MLPG 선형 방정식
- **Asmjit**: JIT 컴파일
- **cJSON**: 설정 및 모델 직렬화

# Development Roadmap
## Phase 1: MVP Core Engine (3-4개월)
### 기본 합성 파이프라인
- WORLD 기반 파라미터 추출 구현
- 기본 HMM 모델 훈련 시스템
- 단순한 MLPG 파라미터 생성
- 기본 PbP 합성 엔진
- UTAU 인터페이스 호환성

### 최소 기능 세트
- 기본적인 보이스뱅크 변환
- 피치/길이 변경 기능
- 표준 UTAU 출력 형식

**성공 기준**: 기존 moresampler 대비 동등한 호환성, 개선된 피치 변환 품질

## Phase 2: 표현 제어 시스템 (2-3개월)
### 플래그 시스템 구현
- g 플래그: 포르만트 시프트
- bre 플래그: 숨소리 제어
- bri 플래그: 밝기 조절
- t 플래그: 피치 오프셋

### 고급 파라미터 생성
- 전역 분산(GV) 제약 추가
- 문맥 특징 확장 (음악적 정보)
- 더 정교한 HMM 구조

**성공 기준**: 표현력 있는 플래그 제어, 자연스러운 파라미터 궤적

## Phase 3: 성능 최적화 (2개월)
### JIT 컴파일 시스템
- Asmjit 통합
- DSP 커널 최적화
- SIMD 명령어 활용

### 메모리 최적화
- .nvm 파일 압축
- 캐싱 시스템
- 메모리 풀링

**성능 목표**: 실시간 처리 (< 1x 렌더링 시간), 메모리 사용량 50% 감소

## Phase 4: 고급 기능 (3개월)
### 향상된 모델링
- 더 복잡한 문맥 특징
- 신경망 기반 생성 (선택적)
- 다중 화자 지원

### 사용자 도구
- GUI 변환 도구
- 품질 분석 툴
- 파라미터 시각화

**성공 기준**: 상용 소프트웨어 수준의 품질과 사용성

# Logical Dependency Chain
## 1. 기반 기술 구축
**우선순위**: 최고
- WORLD 라이브러리 통합
- 기본 파라미터 추출/합성 파이프라인
- HMM 모델 구조 설계

**이유**: 모든 상위 기능의 기반이 되는 핵심 기술

## 2. 기본 합성 엔진
**우선순위**: 최고
**의존성**: 기반 기술
- MLPG 파라미터 생성
- PbP 합성 구현
- UTAU 인터페이스

**이유**: 동작하는 최소 기능 제품 구현

## 3. 보이스뱅크 변환 시스템
**우선순위**: 높음
**의존성**: 기본 합성 엔진
- 오프라인 컨디셔닝 파이프라인
- .nvm 파일 형식 정의
- HMM 훈련 알고리즘

**이유**: 실제 사용 가능한 형태로 만들기 위해 필요

## 4. 표현 제어 레이어
**우선순위**: 높음
**의존성**: 보이스뱅크 변환
- 플래그 해석 시스템
- 파라미터 변환 함수
- 문맥 특징 확장

**이유**: 사용자가 체감할 수 있는 품질 향상

## 5. 성능 최적화
**우선순위**: 중간
**의존성**: 표현 제어
- JIT 컴파일 시스템
- 메모리 최적화
- 캐싱 메커니즘

**이유**: 실용성을 위한 성능 개선

## 6. 고급 기능 및 도구
**우선순위**: 낮음
**의존성**: 성능 최적화
- GUI 도구
- 품질 분석
- 고급 모델링

**이유**: 사용자 경험 향상 및 차별화

# Risks and Mitigations
## 기술적 도전
### 1. HMM 모델 품질
**위험**: 통계 모델이 자연스럽지 못한 결과 생성
**완화**:
- 충분한 훈련 데이터 확보
- 전역 분산 제약 적극 활용
- 기존 HTS 연구 결과 참조

### 2. 실시간 성능
**위험**: 복잡한 처리로 인한 실시간 처리 실패
**완화**:
- 오프라인 전처리로 런타임 부하 최소화
- JIT 최적화로 연산 가속화
- 프로파일링 기반 병목점 식별

### 3. UTAU 호환성
**위험**: 기존 UTAU 생태계와의 호환성 문제
**완화**:
- 표준 리샘플러 인터페이스 엄격 준수
- 기존 플래그 시스템 완전 지원
- 점진적 기능 추가 (레거시 모드 제공)

## MVP 정의
### 핵심 성공 기준
1. **기능적 완성도**: 기본적인 보이스뱅크 변환 및 합성
2. **품질 향상**: 피치 변환 시 포르만트 보존
3. **호환성**: 기존 UTAU 프로젝트에서 드롭인 교체 가능
4. **성능**: 기존 리샘플러 대비 동등하거나 나은 속도

### 최소 기능 범위
- 표준 일본어 VCV 보이스뱅크 지원
- 기본 피치/길이 변경
- 핵심 플래그 (g, t) 지원
- Windows x64 플랫폼 지원

## 자원 제약
### 개발 인력
**제약**: 소수 개발팀
**완화**:
- 오픈소스 라이브러리 적극 활용
- 모듈식 설계로 병렬 개발 가능
- 기존 연구 결과 참조로 시행착오 최소화

### 계산 자원
**제약**: 일반 사용자 PC에서 실행
**완화**:
- 효율적인 알고리즘 선택
- JIT 최적화로 하드웨어 활용 극대화
- 설정 가능한 품질/성능 트레이드오프

# Appendix
## 기술 연구 참조
- WORLD 보코더: 고품질 음성 분석/합성
- HTS Engine: 통계적 파라미터 생성
- libllsm2: 고급 신호 모델링 기법
- MLPG: 부드러운 파라미터 궤적 생성

## 성능 벤치마크 목표
- 렌더링 속도: 실시간 (1x) 이상
- 메모리 사용량: 기존 리샘플러 대비 2배 이내
- 보이스뱅크 크기: 원본 대비 1.5배 이내
- 호환성: 기존 UTAU 프로젝트 100% 지원

## 테스트 전략
- 다양한 보이스뱅크로 변환 테스트
- 기존 리샘플러와 A/B 품질 비교
- 성능 프로파일링 및 최적화
- 커뮤니티 베타 테스트 프로그램
</PRD>